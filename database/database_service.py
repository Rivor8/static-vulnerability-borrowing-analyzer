import sqlite3
from sqlite3 import Cursor, Connection
from typing import Any

import settings
from .row_object import Row


class DataBaseService:

    FIELD_NAME = 'name'
    FIELD_TEXT_VIEW = 'text_view'
    FIELD_AST_VIEW = 'ast_view'

    def __init__(self, db_name: str):
        self.db_name = db_name
        self.conn: Connection | None = None
        self.cursor: Cursor | None = None

    def connect(self) -> bool:
        """
        :return: is_success: bool
        """
        try:
            self.conn = sqlite3.connect(self.db_name)
            self.cursor = self.conn.cursor()
            self._create_table_if_not_exists(settings.DB_TABLE_NAME)
            return True
        except sqlite3.Error as e:
            return False

    def disconnect(self):
        if self.conn:
            self.conn.close()

    def select_rows(self, offset: int, limit: int) -> list[Row]:
        rows: list[Row] = []

        query = f"SELECT * FROM {settings.DB_TABLE_NAME} LIMIT {limit} OFFSET {offset}"
        raw_rows = self._execute_query(query)

        for raw_row in raw_rows:
            rows.append(Row(
                name=raw_row[self.FIELD_NAME],
                text_view=raw_row[self.FIELD_TEXT_VIEW],
                syntax_tree_view=raw_row[self.FIELD_AST_VIEW]
            ))

        return rows

    def rows_count(self) -> int:
        query = f"SELECT count(*) as count FROM {settings.DB_TABLE_NAME}"
        count = int(self._execute_query(query)[0]['count'])
        return count

    def insert_row(self, row: Row):
        query = f"""
        INSERT INTO {settings.DB_TABLE_NAME} ({self.FIELD_NAME}, {self.FIELD_TEXT_VIEW}, {self.FIELD_AST_VIEW})
        VALUES (?, ?, ?)
        """

        self.cursor.execute(query, (row.name, row.text_view, row.syntax_tree_view))
        self.conn.commit()

    def _create_table_if_not_exists(self, table_name: str):
        existing_tables = self._execute_query("SELECT name FROM sqlite_master WHERE type='table';")
        existing_table_names = [table['name'] for table in existing_tables]
        if table_name not in existing_table_names:
            create_table_query = f"""
            CREATE TABLE {table_name} (
                id INTEGER PRIMARY KEY,
                {self.FIELD_NAME} TEXT, 
                {self.FIELD_TEXT_VIEW} TEXT,
                {self.FIELD_AST_VIEW} TEXT);
            """

            self.cursor.execute(create_table_query)
            self.conn.commit()

    def _execute_query(self, query: str) -> list[dict[str, Any]]:
        self.cursor.execute(query)
        rows = self.cursor.fetchall()

        columns = [column[0] for column in self.cursor.description]

        results = []
        for row in rows:
            results.append(dict(zip(columns, row)))

        return results
