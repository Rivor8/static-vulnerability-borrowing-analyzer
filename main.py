from pycparser import c_parser

import trees.transformers
import similarity_calculators.tree_calculator

# just for test
if __name__ == '__main__':
    text = r"""
int main()
{
    char ch;
    double a, b;
    while (1) {
        printf("Enter an operator (+, -, *, /), "
               "if want to exit press x: ");
        scanf(" %c", &ch);
        if (ch == 'x')
            exit(0);
        printf("Enter two first and second operand: ");
        scanf("%lf %lf", &a, &b);
        switch (ch) {
        case '+':
            printf("%.1lf + %.1lf = %.1lf\n", a, b, a + b);
            break;
        case '-':
            printf("%.1lf - %.1lf = %.1lf\n", a, b, a - b);
            break;
        case '*':
            printf("%.1lf * %.1lf = %.1lf\n", a, b, a * b);
            break;
        case '/':
            printf("%.1lf / %.1lf = %.1lf\n", a, b, a / b);
            break;
        default:
            printf(
                "Error! please write a valid operator\n");
        }
 
        printf("\n");
    }
}
    """

    parser1 = c_parser.CParser()
    ast1 = parser1.parse(text, filename='main.c')

    tree1 = trees.transformers.TreeTransformer().transform(ast1)

    text = r"""
int main()
{
    double a, b;
    char ch;
    while (1) {
        printf("Enter an operator (+, -, *, /), "
               "if want to exit press x: ");
        scanf(" %c", &ch);
        printf("Enter two first and second operand: ");
        scanf("%lf %lf", &a, &b);
        switch (ch) {
        case '-':
            printf("%.1lf - %.1lf = %.1lf\n", a, b, a - b);
            break;
        case '*':
            printf("%.1lf * %.1lf = %.1lf\n", a, b, a * b);
            break;
        case '/':
            printf("%.1lf / %.1lf = %.1lf\n", a, b, a / b);
            break;
        default:
            printf(
                "Error! please write a valid operator\n");
        }
 
        printf("\n");
    }
}
    """

    parser2 = c_parser.CParser()
    ast2 = parser2.parse(text, filename='main2.c')

    tree2 = trees.transformers.TreeTransformer().transform(ast2)

    print(similarity_calculators.tree_calculator.calculate_similarity(tree1, tree2))
