import argparse

import settings
from code_source.code_source_service import CodeSourcesService
from borrowing_analyzer import BorrowingAnalyzer
from database.database_service import DataBaseService


def main() -> int:
    # 0 - not save; 1 - save if isn't borrowed; 2 - save anyway
    save_mode = 1

    is_load_code_from_directory = False

    arg_parser = argparse.ArgumentParser(description='Vulnerabilities borrowing analyzer')
    args = get_args(arg_parser)

    if args.print_config is not None:
        print_config()
        return 0

    if args.not_save and args.force_save:
        arg_parser.print_help()
        return 0
    if args.file is None and args.dir is None:
        arg_parser.print_help()
        return 0
    if args.file and args.dir:
        arg_parser.print_help()
        return 0

    if args.dir:
        path = args.dir
        is_load_code_from_directory = True
    else:
        path = args.file

    if args.not_save:
        save_mode = 0
    if args.force_save:
        save_mode = 2

    has_error, code_sources = CodeSourcesService.get_enriched_code_sources_by_path(path, is_load_code_from_directory)
    if has_error:
        print('Error: problems with files loading')
        return 0

    if not code_sources:
        print('No files in directory')
        return 0

    database = DataBaseService(settings.DB_NAME)
    is_success = database.connect()
    if not is_success:
        print('Error: problems with database connection')
        return 0

    rows_count = database.rows_count()
    if rows_count < 1:
        if save_mode != 0:
            for code_source in code_sources:
                row_to_save = code_source.to_database_row()
                database.insert_row(row_to_save)
            print('Saved some sources')
            return 0
        print('Error: there are not rows in database')
        return 0

    limit = settings.BATCH_SELECT_DB_LIMIT
    offset = 0
    rows = database.select_rows(offset, limit)
    analyze_results = []
    while rows:
        analyze_results += BorrowingAnalyzer.analyze_many(code_sources, rows)
        offset += limit
        rows = database.select_rows(offset, limit)

    for result in analyze_results:  # temporary output todo
        print(result)

    return 0


def get_args(arg_parser):
    arg_parser.add_argument('-f', '--file', type=str, help='file with source code')
    arg_parser.add_argument('-d', '--dir', type=str, help='directory with source codes')
    arg_parser.add_argument('--not-save', help='don\'t save the code to the code base')
    arg_parser.add_argument('--force-save', help='save the code to the code base anyway')
    arg_parser.add_argument('--print-config', help='print configs')
    return arg_parser.parse_args()


def print_config():  # todo работу с конфигами может быть сделать
    print('coming soon...');


if __name__ == '__main__':
    exit(main())
