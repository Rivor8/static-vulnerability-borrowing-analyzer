import json
import re
import sys

from pycparser import c_parser, plyparser

from .syntax_tree_node_object import SyntaxTreeNode
from .syntax_tree_transformer import SyntaxTreeTransformer


class SyntaxTreeService:

    TREE_ROOT_NAME = 'FileAST'

    @staticmethod
    def get_syntax_tree_by_code_source(code) -> tuple[bool, SyntaxTreeNode | None]:
        parser = c_parser.CParser()
        try:
            ast_tree = parser.parse(code.text_view, filename=code.file_name)
        except plyparser.ParseError as error:
            print(error, file=sys.stderr)
            return True, None

        return False, SyntaxTreeTransformer.transform(ast_tree)

    @staticmethod
    def serialize_syntax_tree_node(syntax_tree_node: SyntaxTreeNode) -> str:
        syntax_tree_dict = syntax_tree_node.to_dict()
        return json.dumps(syntax_tree_dict)

    @staticmethod
    def deserialize_syntax_tree_node(serialized_text: str) -> tuple[bool, SyntaxTreeNode | None]:
        syntax_tree_dict: dict = json.loads(serialized_text)
        child_syntax_tree_dict = syntax_tree_dict[SyntaxTreeService.TREE_ROOT_NAME]
        has_error, syntax_tree_node = SyntaxTreeService._dict_to_syntax_tree_node(SyntaxTreeService.TREE_ROOT_NAME,
                                                                                  child_syntax_tree_dict)
        if has_error:
            return True, None

        return False, syntax_tree_node

    @staticmethod
    def _dict_to_syntax_tree_node(node_name: str, child_nodes: dict) -> tuple[bool, SyntaxTreeNode | None]:
        node_name = re.sub("[0-9]", "", node_name)
        tree_node = SyntaxTreeNode(node_name)

        if not child_nodes:
            return False, tree_node

        for child_node_name in child_nodes:
            has_error, child_node = SyntaxTreeService._dict_to_syntax_tree_node(child_node_name,
                                                                                child_nodes[child_node_name])
            if has_error:
                return True, None

            tree_node.add_child(child_node)

        return False, tree_node
