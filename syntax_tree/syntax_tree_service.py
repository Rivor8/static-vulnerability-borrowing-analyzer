import json

from pycparser import c_parser
from code_source_object import CodeSource

from . import SyntaxTreeNode, SyntaxTreeTransformer


class SyntaxTreeService:
    @staticmethod
    def get_syntax_tree_by_code(code: CodeSource) -> SyntaxTreeNode:
        parser = c_parser.CParser()
        ast_tree = parser.parse(code.text, filename=code.file_name)
        return SyntaxTreeTransformer.transform(ast_tree)

    @staticmethod
    def serialize_syntax_tree_node(syntax_tree_node: SyntaxTreeNode) -> str:
        syntax_tree_dict = syntax_tree_node.to_dict()
        return json.dumps(syntax_tree_dict)

    @staticmethod
    def deserialize_syntax_tree_node(serialized_text: str) -> SyntaxTreeNode:
        syntax_tree_dict: dict = json.loads(serialized_text)
        syntax_tree_node = SyntaxTreeService._dict_to_syntax_tree_node(syntax_tree_dict)

        return syntax_tree_node

    @staticmethod
    def _dict_to_syntax_tree_node(dict_node: dict) -> SyntaxTreeNode:
        # В словаре будет только один элемент, соответствующий одной ноде
        node_name = dict_node.items()[0][0]
        node_values = dict_node.items()[0][1]

        tree_node = SyntaxTreeNode(node_name)

        if not node_values:
            return tree_node

        for child_dict_node in node_values:
            child_node = SyntaxTreeService._dict_to_syntax_tree_node(child_dict_node)
            tree_node.add_child(child_node)

        return tree_node
