from copy import copy
from typing import Self

import syntax_tree


class SyntaxTreeNode:
    def __init__(self, node_name: str):
        self.node_name: str = node_name
        self._children: list[SyntaxTreeNode] = []

    def to_dict(self) -> dict:
        syntax_tree_dict = {}

        for child_tree_node in self._children:
            syntax_tree_dict[self.node_name] = copy(child_tree_node.to_dict())

        return syntax_tree_dict

    def add_child(self, child: syntax_tree.SyntaxTreeNode) -> Self:
        self._children.append(child)
        return self

    def get_children(self) -> list[syntax_tree.SyntaxTreeNode]:
        return self._children

    def __str__(self):
        str_children_list = []

        for child in self._children:
            str_children_list.append(str(child))

        str_children = ','.join(str_children_list)

        if str_children == '':
            return self.node_name

        return self.node_name + '{' + str_children + '}'
