import random
from typing import Self


class SyntaxTreeNode:

    MAX_RANDOM = 1_000_000_000

    def __init__(self, node_name: str):
        self.node_name: str = node_name
        self._children: list[SyntaxTreeNode] = []

    def to_dict(self) -> dict:
        syntax_tree_dict = {
            self.node_name: self._to_dict_internal()
        }

        return syntax_tree_dict

    def _to_dict_internal(self) -> dict:
        syntax_tree_dict = {}

        for child_tree_node in self._children:
            unique_node_name = child_tree_node.node_name + str(random.randint(0, self.MAX_RANDOM))
            syntax_tree_dict[unique_node_name] = child_tree_node._to_dict_internal()

        return syntax_tree_dict

    def add_child(self, child: Self) -> Self:
        self._children.append(child)
        return self

    def get_children(self) -> list[Self]:
        return self._children

    def __str__(self):
        str_children_list = []

        for child in self._children:
            str_children_list.append(str(child))

        str_children = ','.join(str_children_list)

        if str_children == '':
            return self.node_name

        return self.node_name + '{' + str_children + '}'
