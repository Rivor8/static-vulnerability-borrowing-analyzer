import os
import re

import settings
from .code_source_object import CodeSource
from normalizer import Normalizer
from syntax_tree.syntax_tree_service import SyntaxTreeService


class CodeSourcesService:
    def __init__(self, path: str, is_directory=False):
        self.is_directory = is_directory
        self.path = path

    def load(self) -> tuple[bool, list[CodeSource]]:
        if self.is_directory:
            if not os.path.isdir(self.path):
                return True, []

            return self._load_directory()

        has_error, code_source = self._load_file()
        if has_error:
            return True, []

        return False, [code_source]

    def _load_file(self, path='') -> tuple[bool, CodeSource | None]:
        if path == '':
            path = self.path

        if not os.path.isfile(path):
            return True, None

        code_source = CodeSource()
        code_source.file_path = path
        code_source.file_name = os.path.split(path)[-1]

        with open(path, 'r', encoding="utf8") as file:
            code_source.raw_text = file.read()

        return False, code_source

    def _load_directory(self) -> tuple[bool, list[CodeSource]]:
        code_sources: list[CodeSource] = []

        pattern = re.compile(settings.FILES_SEARCH_REGEXP)
        for root, dirs, files in os.walk(self.path):
            for file in files:
                if not re.search(pattern, file):
                    continue

                path = os.path.join(root, file)
                has_error, code_source = self._load_file(path)

                if has_error:
                    return True, []

                code_sources.append(code_source)

        return False, code_sources

    @staticmethod
    def get_enriched_code_sources_by_path(path, is_directory=False) -> tuple[bool, list[CodeSource]]:
        code_sources_service = CodeSourcesService(path, is_directory)
        has_error, code_sources = code_sources_service.load()
        if has_error:
            return True, []

        for code_source in code_sources:
            code_source.text_view = Normalizer(code_source.raw_text).get_normalized()
            code_source.syntax_tree_view = SyntaxTreeService.get_syntax_tree_by_code_source(code_source)

        return False, code_sources
