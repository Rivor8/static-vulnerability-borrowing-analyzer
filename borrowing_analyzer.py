import settings
from analyze_result_extra_object import AnalyzeResultExtra
from analyze_result_object import AnalyzeResult
from calculators.jaccard_tree_calculator import JaccardTreeCalculator
from code_source.code_source_object import CodeSource
from database.row_object import Row
from calculators.ged_tree_calculator import GedTreeCalculator
from calculators.texts_calculator import TextsCalculator
from syntax_tree.syntax_tree_service import SyntaxTreeService


class BorrowingAnalyzer:

    @staticmethod
    def analyze_many(code_sources: list[CodeSource], rows: list[Row]) \
            -> tuple[list[AnalyzeResult], list[CodeSource]]:
        analyze_results = []
        not_borrowed_codes = []
        for row in rows:
            for code_source in code_sources:
                text_view_score = TextsCalculator.calculate_similarity(
                    code_source.text_view,
                    row.text_view
                )

                if text_view_score > settings.MAX_TEXT_SCORE:
                    analyze_results.append(AnalyzeResult(
                        name=row.name,
                        text_view_score=text_view_score,
                        syntax_tree_view_score=None,
                        text_view_solution=True,
                        syntax_tree_view_solution=False
                    ))
                    continue

                has_error, syntax_tree_node = SyntaxTreeService.deserialize_syntax_tree_node(row.syntax_tree_view)
                if has_error:
                    continue

                syntax_tree_view_score = GedTreeCalculator.calculate_similarity(
                    code_source.syntax_tree_view,
                    syntax_tree_node
                )
                if syntax_tree_view_score > settings.MAX_GED_TREE_SCORE:
                    analyze_results.append(AnalyzeResult(
                        name=row.name,
                        text_view_score=text_view_score,
                        syntax_tree_view_score=syntax_tree_view_score,
                        text_view_solution=text_view_score > settings.MAX_TEXT_SCORE,
                        syntax_tree_view_solution=True
                    ))
                    continue
                not_borrowed_codes.append(code_source)

        return analyze_results, not_borrowed_codes

    @staticmethod
    def analyze_two_code_sources(code_source1: CodeSource, code_source2: CodeSource) -> AnalyzeResultExtra:
        text_view_score = TextsCalculator.calculate_similarity(
            code_source1.text_view,
            code_source2.text_view
        )

        ged_syntax_tree_view_score = GedTreeCalculator.calculate_similarity(
            code_source1.syntax_tree_view,
            code_source2.syntax_tree_view
        )

        jaccard_syntax_tree_view_score = JaccardTreeCalculator.calculate_similarity(
            code_source1.syntax_tree_view,
            code_source2.syntax_tree_view
        )

        return AnalyzeResultExtra(
            name=code_source2.file_name,
            text_view_score=text_view_score,
            ged_syntax_tree_view_score=ged_syntax_tree_view_score,
            jaccard_syntax_tree_view_score=jaccard_syntax_tree_view_score,
            text_view_solution=text_view_score > settings.MAX_TEXT_SCORE,
            ged_syntax_tree_view_solution=ged_syntax_tree_view_score > settings.MAX_GED_TREE_SCORE,
            jaccard_syntax_tree_view_solution=jaccard_syntax_tree_view_score > settings.MAX_JACCARD_TREE_SCORE
        )
