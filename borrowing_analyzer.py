from analyze_result_object import AnalyzeResult
from code_source.code_source_object import CodeSource
from database.row_object import Row
from calculators.tree_calculator import TreeCalculator
from calculators.texts_calculator import TextsCalculator
from syntax_tree.syntax_tree_service import SyntaxTreeService


class BorrowingAnalyzer:

    @classmethod
    def analyze_many(cls, code_sources: list[CodeSource], rows: list[Row]) -> list[AnalyzeResult]:
        analyze_results = []
        for row in rows:
            for code_source in code_sources:
                text_view_score = TextsCalculator.calculate_similarity(
                    code_source.text_view,
                    row.text_view
                )
                # print(code_source.syntax_tree_view)
                # print('==================')
                # print(SyntaxTreeService.deserialize_syntax_tree_node(row.syntax_tree_view))

                syntax_tree_node = SyntaxTreeService.deserialize_syntax_tree_node(row.syntax_tree_view)
                syntax_tree_view_score = TreeCalculator.calculate_similarity(
                    code_source.syntax_tree_view,
                    syntax_tree_node
                )
                analyze_results.append(AnalyzeResult(
                    name=row.name,
                    text_view_score=text_view_score,
                    syntax_tree_view_score=syntax_tree_view_score,
                    text_view_solution=True,
                    syntax_tree_view_solution=True
                ))

        return analyze_results
