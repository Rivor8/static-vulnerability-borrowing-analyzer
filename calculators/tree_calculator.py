from syntax_tree.syntax_tree_node_object import SyntaxTreeNode


class TreeCalculator:

    @staticmethod
    def calculate_similarity(first_tree: SyntaxTreeNode, second_tree: SyntaxTreeNode) -> float:
        first_tree_children = first_tree.get_children()
        second_tree_children = second_tree.get_children()

        if first_tree_children == [] and second_tree_children == []:
            return 1.0

        if first_tree_children == [] or second_tree_children == []:
            return 0.0

        value_similarity = 0.0
        if first_tree.node_name == second_tree.node_name:
            value_similarity = 1.0

        children_similarity = 0.0

        is_children_similar_len = len(first_tree_children) == len(second_tree_children)

        if len(first_tree_children) != 0 and is_children_similar_len:
            for first_child, second_child in zip(first_tree_children, second_tree_children):
                children_similarity += TreeCalculator.calculate_similarity(first_child, second_child)
            children_similarity /= len(first_tree_children)

        total_similarity = 0.1 * value_similarity + 0.9 * children_similarity
        return total_similarity
