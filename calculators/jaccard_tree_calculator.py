from syntax_tree.syntax_tree_node_object import SyntaxTreeNode


class JaccardTreeCalculator:

    @staticmethod
    def calculate_similarity(first_tree: SyntaxTreeNode, second_tree: SyntaxTreeNode) -> float:
        first_nodes = JaccardTreeCalculator._get_all_nodes(first_tree)
        second_nodes = JaccardTreeCalculator._get_all_nodes(second_tree)

        intersection = len(first_nodes & second_nodes)
        union = len(first_nodes | second_nodes)

        if union == 0:
            return 1.0
        return intersection / union

    @staticmethod
    def _get_all_nodes(tree: SyntaxTreeNode) -> set:
        nodes = set()
        JaccardTreeCalculator._collect_nodes(tree, nodes)
        return nodes

    @staticmethod
    def _collect_nodes(node: SyntaxTreeNode, nodes: set):
        nodes.add(node.node_name)
        for child in node.get_children():
            JaccardTreeCalculator._collect_nodes(child, nodes)
