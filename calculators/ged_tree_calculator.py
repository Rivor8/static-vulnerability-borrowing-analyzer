from syntax_tree.syntax_tree_node_object import SyntaxTreeNode


class GedTreeCalculator:
    @staticmethod
    def calculate_similarity(first_tree: SyntaxTreeNode, second_tree: SyntaxTreeNode) -> float:
        first_list = GedTreeCalculator._tree_to_list(first_tree)
        second_list = GedTreeCalculator._tree_to_list(second_tree)

        distance = GedTreeCalculator._edit_distance(first_list, second_list)

        max_len = max(len(first_list), len(second_list))
        if max_len == 0:
            return 1.0
        similarity = 1 - (distance / max_len)
        return similarity

    @staticmethod
    def _tree_to_list(tree: SyntaxTreeNode):
        result = []

        def traverse(node: SyntaxTreeNode, path: str):
            result.append((path, node.node_name))
            for i, child in enumerate(node.get_children()):
                traverse(child, path + str(i) + '/')

        traverse(tree, '')
        return result

    @staticmethod
    def _edit_distance(first_list: list, second_list: list) -> int:
        m, n = len(first_list), len(second_list)
        dp = [[0] * (n + 1) for _ in range(m + 1)]

        for i in range(m + 1):
            for j in range(n + 1):
                if i == 0:
                    dp[i][j] = j
                elif j == 0:
                    dp[i][j] = i
                elif first_list[i - 1][1] == second_list[j - 1][1]:
                    dp[i][j] = dp[i - 1][j - 1]
                else:
                    dp[i][j] = 1 + min(dp[i][j - 1],
                                       dp[i - 1][j],
                                       dp[i - 1][j - 1])

        return dp[m][n]
